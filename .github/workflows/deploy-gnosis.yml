name: Deploy to Gnosis Chain

on:
  push:
    branches:
      - main
      - security-review  # Temporary: test deployment on PR
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-gnosis:
    name: Deploy to Gnosis Chain
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install dependencies
        run: forge install

      - name: Build contracts
        run: |
          forge clean
          forge build

      - name: Run tests
        run: forge test -vvv

      - name: Deploy CommuneOS
        id: deploy
        env:
          PRIVATE_KEY: ${{ secrets.GNOSIS_PRIVATE_KEY }}
          GNOSIS_RPC_URL: ${{ secrets.GNOSIS_RPC_URL }}
          CONFIG_PATH: config/gnosis.json
        run: |
          # Use --resume to handle pending transactions
          DEPLOY_OUTPUT=$(forge script script/Deploy.s.sol:DeployScript \
            --rpc-url $GNOSIS_RPC_URL \
            --broadcast \
            --resume \
            -vvvv 2>&1 || forge script script/Deploy.s.sol:DeployScript \
            --rpc-url $GNOSIS_RPC_URL \
            --broadcast \
            -vvvv)

          echo "$DEPLOY_OUTPUT"

          # Extract contract addresses from deployment output
          COMMUNE_OS=$(echo "$DEPLOY_OUTPUT" | grep "^  CommuneOS deployed to:" | awk '{print $NF}')
          COMMUNE_REGISTRY=$(echo "$DEPLOY_OUTPUT" | grep "^  CommuneRegistry:" | awk '{print $NF}')
          MEMBER_REGISTRY=$(echo "$DEPLOY_OUTPUT" | grep "^  MemberRegistry:" | awk '{print $NF}')
          CHORE_SCHEDULER=$(echo "$DEPLOY_OUTPUT" | grep "^  ChoreScheduler:" | awk '{print $NF}')
          EXPENSE_MANAGER=$(echo "$DEPLOY_OUTPUT" | grep "^  ExpenseManager:" | awk '{print $NF}')
          VOTING_MODULE=$(echo "$DEPLOY_OUTPUT" | grep "^  VotingModule:" | awk '{print $NF}')
          COLLATERAL_MANAGER=$(echo "$DEPLOY_OUTPUT" | grep "^  CollateralManager:" | awk '{print $NF}')

          echo "commune_os=$COMMUNE_OS" >> $GITHUB_OUTPUT
          echo "commune_registry=$COMMUNE_REGISTRY" >> $GITHUB_OUTPUT
          echo "member_registry=$MEMBER_REGISTRY" >> $GITHUB_OUTPUT
          echo "chore_scheduler=$CHORE_SCHEDULER" >> $GITHUB_OUTPUT
          echo "expense_manager=$EXPENSE_MANAGER" >> $GITHUB_OUTPUT
          echo "voting_module=$VOTING_MODULE" >> $GITHUB_OUTPUT
          echo "collateral_manager=$COLLATERAL_MANAGER" >> $GITHUB_OUTPUT

          echo "Deployed CommuneOS to: $COMMUNE_OS"

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Gnosis Chain Mainnet Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** Gnosis Chain" >> $GITHUB_STEP_SUMMARY
          echo "**Chain ID:** 100" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Contracts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Contract | Address | Explorer |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| CommuneOS | \`${{ steps.deploy.outputs.commune_os }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.commune_os }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| CommuneRegistry | \`${{ steps.deploy.outputs.commune_registry }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.commune_registry }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| MemberRegistry | \`${{ steps.deploy.outputs.member_registry }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.member_registry }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| ChoreScheduler | \`${{ steps.deploy.outputs.chore_scheduler }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.chore_scheduler }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| ExpenseManager | \`${{ steps.deploy.outputs.expense_manager }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.expense_manager }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| VotingModule | \`${{ steps.deploy.outputs.voting_module }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.voting_module }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| CollateralManager | \`${{ steps.deploy.outputs.collateral_manager }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.collateral_manager }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Save deployment artifacts
        run: |
          mkdir -p deployments/gnosis

          cat > deployments/gnosis/deployment.json << EOF
          {
            "network": "gnosis",
            "chainId": 100,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployer": "GitHub Actions",
            "gitCommit": "${{ github.sha }}",
            "contracts": {
              "CommuneOS": "${{ steps.deploy.outputs.commune_os }}",
              "CommuneRegistry": "${{ steps.deploy.outputs.commune_registry }}",
              "MemberRegistry": "${{ steps.deploy.outputs.member_registry }}",
              "ChoreScheduler": "${{ steps.deploy.outputs.chore_scheduler }}",
              "ExpenseManager": "${{ steps.deploy.outputs.expense_manager }}",
              "VotingModule": "${{ steps.deploy.outputs.voting_module }}",
              "CollateralManager": "${{ steps.deploy.outputs.collateral_manager }}"
            }
          }
          EOF

          cat deployments/gnosis/deployment.json

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gnosis-deployment
          path: deployments/gnosis/

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ðŸš€ Gnosis Chain Deployment

            **Network:** Gnosis Chain
            **Chain ID:** 100

            ### Deployed Contracts

            | Contract | Address | Explorer |
            | --- | --- | --- |
            | CommuneOS | \`${{ steps.deploy.outputs.commune_os }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.commune_os }}) |
            | CommuneRegistry | \`${{ steps.deploy.outputs.commune_registry }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.commune_registry }}) |
            | MemberRegistry | \`${{ steps.deploy.outputs.member_registry }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.member_registry }}) |
            | ChoreScheduler | \`${{ steps.deploy.outputs.chore_scheduler }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.chore_scheduler }}) |
            | ExpenseManager | \`${{ steps.deploy.outputs.expense_manager }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.expense_manager }}) |
            | VotingModule | \`${{ steps.deploy.outputs.voting_module }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.voting_module }}) |
            | CollateralManager | \`${{ steps.deploy.outputs.collateral_manager }}\` | [View](https://gnosis.blockscout.com/address/${{ steps.deploy.outputs.collateral_manager }}) |

            **Deployment Time:** ${new Date().toISOString()}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

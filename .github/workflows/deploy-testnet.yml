name: Deploy to Holesky Testnet

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev
  workflow_dispatch:

jobs:
  deploy-testnet:
    name: Deploy to Holesky
    runs-on: ubuntu-latest
    environment: testnet
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install dependencies
        run: forge install

      - name: Build contracts
        run: |
          forge clean
          forge build

      - name: Run tests
        run: forge test -vvv

      - name: Deploy CommuneOS
        id: deploy
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          HOLESKY_RPC_URL: ${{ secrets.HOLESKY_RPC_URL }}
          CONFIG_PATH: config/testnet.json
        run: |
          DEPLOY_OUTPUT=$(forge script script/Deploy.s.sol:DeployScript \
            --rpc-url $HOLESKY_RPC_URL \
            --broadcast \
            --slow \
            -vvvv)

          echo "$DEPLOY_OUTPUT"

          # Extract contract addresses from deployment output
          COMMUNE_OS=$(echo "$DEPLOY_OUTPUT" | grep "^  CommuneOS deployed to:" | awk '{print $NF}')
          COMMUNE_REGISTRY=$(echo "$DEPLOY_OUTPUT" | grep "^  CommuneRegistry:" | awk '{print $NF}')
          MEMBER_REGISTRY=$(echo "$DEPLOY_OUTPUT" | grep "^  MemberRegistry:" | awk '{print $NF}')
          CHORE_SCHEDULER=$(echo "$DEPLOY_OUTPUT" | grep "^  ChoreScheduler:" | awk '{print $NF}')
          EXPENSE_MANAGER=$(echo "$DEPLOY_OUTPUT" | grep "^  ExpenseManager:" | awk '{print $NF}')
          VOTING_MODULE=$(echo "$DEPLOY_OUTPUT" | grep "^  VotingModule:" | awk '{print $NF}')
          COLLATERAL_MANAGER=$(echo "$DEPLOY_OUTPUT" | grep "^  CollateralManager:" | awk '{print $NF}')

          echo "commune_os=$COMMUNE_OS" >> $GITHUB_OUTPUT
          echo "commune_registry=$COMMUNE_REGISTRY" >> $GITHUB_OUTPUT
          echo "member_registry=$MEMBER_REGISTRY" >> $GITHUB_OUTPUT
          echo "chore_scheduler=$CHORE_SCHEDULER" >> $GITHUB_OUTPUT
          echo "expense_manager=$EXPENSE_MANAGER" >> $GITHUB_OUTPUT
          echo "voting_module=$VOTING_MODULE" >> $GITHUB_OUTPUT
          echo "collateral_manager=$COLLATERAL_MANAGER" >> $GITHUB_OUTPUT

          echo "Deployed CommuneOS to: $COMMUNE_OS"

      - name: Verify contracts on Etherscan
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          echo "Waiting for Etherscan to index contracts..."
          sleep 60

          # Read collateral token from config
          COLLATERAL_TOKEN=$(jq -r '.collateralToken' config/testnet.json)

          # Verify CommuneOS (main contract)
          echo "Verifying CommuneOS..."
          forge verify-contract \
            ${{ steps.deploy.outputs.commune_os }} \
            src/CommuneOS.sol:CommuneOS \
            --chain-id 17000 \
            --constructor-args $(cast abi-encode "constructor(address)" "$COLLATERAL_TOKEN") \
            --etherscan-api-key $ETHERSCAN_API_KEY \
            --watch || true

          sleep 10

          # Verify CollateralManager
          echo "Verifying CollateralManager..."
          forge verify-contract \
            ${{ steps.deploy.outputs.collateral_manager }} \
            src/CollateralManager.sol:CollateralManager \
            --chain-id 17000 \
            --constructor-args $(cast abi-encode "constructor(address)" "$COLLATERAL_TOKEN") \
            --etherscan-api-key $ETHERSCAN_API_KEY \
            --watch || true

          sleep 10

          # Verify module contracts (no constructor args)
          for contract in "CommuneRegistry" "MemberRegistry" "ChoreScheduler" "ExpenseManager" "VotingModule"; do
            echo "Verifying $contract..."

            # Get the address variable name (lowercase with underscores)
            ADDRESS_VAR=$(echo $contract | sed 's/\([A-Z]\)/_\L\1/g' | sed 's/^_//')

            # Get the address from outputs
            if [ "$contract" = "CommuneRegistry" ]; then
              ADDRESS="${{ steps.deploy.outputs.commune_registry }}"
            elif [ "$contract" = "MemberRegistry" ]; then
              ADDRESS="${{ steps.deploy.outputs.member_registry }}"
            elif [ "$contract" = "ChoreScheduler" ]; then
              ADDRESS="${{ steps.deploy.outputs.chore_scheduler }}"
            elif [ "$contract" = "ExpenseManager" ]; then
              ADDRESS="${{ steps.deploy.outputs.expense_manager }}"
            elif [ "$contract" = "VotingModule" ]; then
              ADDRESS="${{ steps.deploy.outputs.voting_module }}"
            fi

            forge verify-contract \
              $ADDRESS \
              src/$contract.sol:$contract \
              --chain-id 17000 \
              --etherscan-api-key $ETHERSCAN_API_KEY \
              --watch || true

            sleep 10
          done

          echo "Contract verification complete!"

      - name: Create deployment summary
        run: |
          echo "## ðŸš€ Holesky Testnet Deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Network:** Holesky (Ethereum Testnet)" >> $GITHUB_STEP_SUMMARY
          echo "**Chain ID:** 17000" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Contracts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Contract | Address | Explorer |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| CommuneOS | \`${{ steps.deploy.outputs.commune_os }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.commune_os }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| CommuneRegistry | \`${{ steps.deploy.outputs.commune_registry }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.commune_registry }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| MemberRegistry | \`${{ steps.deploy.outputs.member_registry }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.member_registry }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| ChoreScheduler | \`${{ steps.deploy.outputs.chore_scheduler }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.chore_scheduler }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| ExpenseManager | \`${{ steps.deploy.outputs.expense_manager }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.expense_manager }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| VotingModule | \`${{ steps.deploy.outputs.voting_module }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.voting_module }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| CollateralManager | \`${{ steps.deploy.outputs.collateral_manager }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.collateral_manager }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY

      - name: Save deployment artifacts
        run: |
          mkdir -p deployments/holesky

          cat > deployments/holesky/deployment.json << EOF
          {
            "network": "holesky",
            "chainId": 17000,
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "deployer": "GitHub Actions",
            "contracts": {
              "CommuneOS": "${{ steps.deploy.outputs.commune_os }}",
              "CommuneRegistry": "${{ steps.deploy.outputs.commune_registry }}",
              "MemberRegistry": "${{ steps.deploy.outputs.member_registry }}",
              "ChoreScheduler": "${{ steps.deploy.outputs.chore_scheduler }}",
              "ExpenseManager": "${{ steps.deploy.outputs.expense_manager }}",
              "VotingModule": "${{ steps.deploy.outputs.voting_module }}",
              "CollateralManager": "${{ steps.deploy.outputs.collateral_manager }}"
            }
          }
          EOF

          cat deployments/holesky/deployment.json

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: holesky-deployment
          path: deployments/holesky/

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ðŸš€ Holesky Testnet Deployment

            **Network:** Holesky (Ethereum Testnet)
            **Chain ID:** 17000

            ### Deployed Contracts

            | Contract | Address | Explorer |
            | --- | --- | --- |
            | CommuneOS | \`${{ steps.deploy.outputs.commune_os }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.commune_os }}) |
            | CommuneRegistry | \`${{ steps.deploy.outputs.commune_registry }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.commune_registry }}) |
            | MemberRegistry | \`${{ steps.deploy.outputs.member_registry }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.member_registry }}) |
            | ChoreScheduler | \`${{ steps.deploy.outputs.chore_scheduler }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.chore_scheduler }}) |
            | ExpenseManager | \`${{ steps.deploy.outputs.expense_manager }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.expense_manager }}) |
            | VotingModule | \`${{ steps.deploy.outputs.voting_module }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.voting_module }}) |
            | CollateralManager | \`${{ steps.deploy.outputs.collateral_manager }}\` | [View](https://holesky.etherscan.io/address/${{ steps.deploy.outputs.collateral_manager }}) |

            **Deployment Time:** ${new Date().toISOString()}
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
